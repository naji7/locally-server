generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  fullName           String
  teleNo             String               @unique
  email              String               @unique
  password           String
  role               String               @default("USER")  // USER, ADMIN
  balance            Float                @default(0.00)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  subscriptionPlan   SubscriptionPlan     @relation(fields: [subId], references: [id])
  subId              String               @db.ObjectId
  subscription       Subscription[]
  transaction        Transaction[]
  entries            Entries[] 
  giveaway           Giveaway[]
}

model SubscriptionPlan {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  tier               String
  entries            Int
  oldEntries         Int
  monthlyPrice       String?
  semiAnnualPrice    String?
  annualPrice        String?
  features           String[]
  background         String
  main               String
  priceIdMonth       String
  priceIdSemiAnnual  String
  priceIdAnnual      String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  status             String        @default("ACTIVE")  // ACTIVE, CANCELLED
  users              User[]
  subscription       Subscription[]
}

model OneOffPackage {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String?
  description        String?
  price              Float
  entries            Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  status             String        @default("ACTIVE")  // ACTIVE, CANCELLED
}

model Subscription {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                 @relation(fields: [userId], references: [id])
  userId                String               @db.ObjectId
  subscriptionPlan      SubscriptionPlan     @relation(fields: [subId], references: [id])
  subId                 String               @db.ObjectId
  durationType          String
  status                String               @default("ACTIVE")  // ACTIVE, CANCELLED
  paymentMethod         String               @default("STRIPE")  // CRYPTO, POINTS
  stripeId              String?
  stripeSubscriptionId  String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  endsAt                DateTime
  cancelledAt           DateTime?
  isPaymentVerified     Boolean              @default(false)
}

model Transaction {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  txnType            String
  txnMethod          String
  amount             Float
  currency           String
  customer           String?
  customerEmail      String?
  mode               String?
  paymentInternet    String?
  startAt            DateTime?
  endsAt             DateTime?
  paymentMethod      String
  invoice            String?
  createdAt          DateTime             @default(now())    
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @db.ObjectId           
}

model Giveaway {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String?
  type               String        @default("WEEKLY")  // WEEKLY, MAJOR
  startDate          DateTime
  endDate            DateTime
  price              Float
  youtubeLink        String?
  // winningUser        String?
  winningUser        User?          @relation(fields: [winningUserId], references: [id])
  winningUserId      String?        @db.ObjectId
  selectedUsers      String[]
  imageUrl           String?
  reqEntries         Int
  createdAt          DateTime      @default(now())
  drawedAt           DateTime?
  status             Int           @default(0)  // 0 - Active, 1 - Deactive
  drawStatus         Int           @default(0)  // 0 - Not Drawn, 1 - Drawn
  entries            Entries[]
}


model Entries{
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  giveaway           Giveaway      @relation(fields: [giveawayId], references: [id])
  giveawayId         String        @db.ObjectId
  user               User          @relation(fields: [userId], references: [id])
  userId             String        @db.ObjectId
  entries            Int
}


model Verification {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  email              String        @unique
  otp                Int           @unique
  createdAt          DateTime      @default(now())
  expireAt           DateTime      
}

model Raffle {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String
}

model Coupon {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  coupen             String
  description        String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}